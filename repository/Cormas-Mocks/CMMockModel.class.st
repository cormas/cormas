"
A model to use as example, even more stupid than StupidModel!
 
Internal Representation and Key Implementation Points.

    Instance Variables
	theAgentLocations:		<Object>
	theCells:		<Object>


    Implementation Points
"
Class {
	#name : #CMMockModel,
	#superclass : #CMAbstractModel,
	#instVars : [
		'theAgentLocations',
		'theCells'
	],
	#category : #'Cormas-Mocks'
}

{ #category : #default }
CMMockModel class >> defaultControl [
	^ #stepSynchronously:
]

{ #category : #accessing }
CMMockModel class >> friendlyName [
	^ 'TestModel'
]

{ #category : #accessing }
CMMockModel class >> newMock1 [
	" Answer a new <CMAbstractModel> with predefined settings "

	^ (self newWithActiveInit: #initAlive)
			initSimulation;
			createGridLines: 20 columns: 10 neighbourhood: 4 closed: true;
			yourself
]

{ #category : #'initialize-release' }
CMMockModel >> init [ 

	self initRandom
]

{ #category : #initialization }
CMMockModel >> initAlive [
self theCells do: #initAlive
]

{ #category : #initialization }
CMMockModel >> initDead [
	self theCells do: #initDead
]

{ #category : #initialization }
CMMockModel >> initRandom [
	self theCells do: #initRandom
]

{ #category : #probes }
CMMockModel >> numAlives [
	"return the population size of the alive"

	<probe>
	| count |
	count := 0.
	self allTheEntities
		do: [ :cell | 
			cell state = #alive
				ifTrue: [ count := count + 1 ] ].
	^ count
]

{ #category : #probes }
CMMockModel >> numDeads [
	"return the population size of the dead"

	<probe>
	| count |
	count := 0.
	self allTheEntities
		do: [ :cell | 
			cell state = #dead
				ifTrue: [ count := count + 1 ] ].
	^ count
]

{ #category : #accessing }
CMMockModel >> theAgentLocations [
	^ theAgentLocations ifNil: [ theAgentLocations := OrderedCollection new ]
]

{ #category : #accessing }
CMMockModel >> theCells [
	^ theCells ifNil: [ theCells := OrderedCollection new ]
]
